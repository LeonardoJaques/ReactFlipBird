{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/leonardojaques/Desktop/WorkTable/flipBirdReact/flipbirdreactnativ/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Bird from \"./components/Bird\";\nimport Obstacles from \"./components/Obstacles\";\nexport default function App() {\n  var screenWidth = Dimensions.get('screen').width;\n  var screenHeight = Dimensions.get('screen').height;\n  var birdLeft = screenWidth / 2;\n\n  var _useState = useState(screenHeight / 2 + 30),\n      _useState2 = _slicedToArray(_useState, 2),\n      birdBottom = _useState2[0],\n      setBirdBottom = _useState2[1];\n\n  var gravity = 3;\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      obstaclesNegHeight = _useState4[0],\n      setObstaclesNegHeight = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      obstaclesNegHeightTwo = _useState6[0],\n      setObstaclesNegHeightTwo = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      score = _useState8[0],\n      setScore = _useState8[1];\n\n  var _useState9 = useState(screenWidth),\n      _useState10 = _slicedToArray(_useState9, 2),\n      obstaclesLeft = _useState10[0],\n      setObstaclesLeft = _useState10[1];\n\n  var _useState11 = useState(screenWidth + screenWidth / 2),\n      _useState12 = _slicedToArray(_useState11, 2),\n      obstaclesLeftTwo = _useState12[0],\n      setObstaclesLeftTwo = _useState12[1];\n\n  var obstacleWidth = 60;\n  var obstacleHeight = 300;\n  var gap = 200;\n  var gameTimerId;\n  var obstaclesLeftTimerId;\n  var obstaclesLeftTimerIdTwo;\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isGameOver = _useState14[0],\n      setIsGameOver = _useState14[1];\n\n  useEffect(function () {\n    if (birdBottom > 0) {\n      gameTimerId = setInterval(function () {\n        setBirdBottom(function (birdBottom) {\n          return birdBottom - gravity;\n        });\n      }, 30);\n      return function () {\n        clearInterval(gameTimerId);\n      };\n    }\n  }, [birdBottom]);\n  useEffect(function () {\n    if (obstaclesLeft > -obstacleWidth) {\n      obstaclesLeftTimerId = setInterval(function () {\n        setObstaclesLeft(function (obstaclesLeft) {\n          return obstaclesLeft - 5;\n        });\n      }, 30);\n      return function () {\n        clearInterval(obstaclesLeftTimerId);\n      };\n    } else {\n      setObstaclesLeft(screenWidth);\n      setObstaclesNegHeight(-Math.random() * 100);\n      setScore(function (score) {\n        return score + 1;\n      });\n    }\n  }, [obstaclesLeft]);\n  useEffect(function () {\n    if (obstaclesLeftTwo > -obstacleWidth) {\n      obstaclesLeftTimerIdTwo = setInterval(function () {\n        setObstaclesLeftTwo(function (obstaclesLeftTwo) {\n          return obstaclesLeftTwo - 5;\n        });\n      }, 30);\n      return function () {\n        clearInterval(obstaclesLeftTimerIdTwo);\n      };\n    } else {\n      setObstaclesLeftTwo(screenWidth);\n      setObstaclesNegHeightTwo(-Math.random() * 100);\n      setScore(function (score) {\n        return score + 1;\n      });\n    }\n  }, [obstaclesLeftTwo]);\n  useEffect(function () {\n    console.log(obstaclesLeft);\n    console.log(screenWidth / 2);\n    console.log(obstaclesLeft > screenWidth / 2);\n\n    if ((birdBottom < obstaclesNegHeight + obstacleHeight + 30 || birdBottom > obstaclesNegHeight + obstacleHeight + gap - 30) && obstaclesLeft > screenWidth / 2 - 30 && obstaclesLeft < screenWidth / 2 + 30 || (birdBottom < obstaclesNegHeightTwo + obstacleHeight + 30 || birdBottom > obstaclesNegHeightTwo + obstacleHeight + gap - 30) && obstaclesLeftTwo > screenWidth / 2 - 30 && obstaclesLeftTwo < screenWidth / 2 + 30) {\n      console.log('game over');\n      gameOver();\n    }\n  });\n\n  var gameOver = function gameOver() {\n    clearInterval(gameTimerId);\n    clearInterval(obstaclesLeftTimerId);\n    clearInterval(obstaclesLeftTimerIdTwo);\n    setIsGameOver(true);\n  };\n\n  var jump = function jump() {\n    if (!isGameOver && birdBottom < screenHeight) {\n      setBirdBottom(function (birdBottom) {\n        return birdBottom + 50;\n      });\n      console.log('jumped');\n    }\n  };\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: jump\n  }, React.createElement(View, {\n    style: styles.container\n  }, isGameOver && React.createElement(Text, null, \"Score\"), React.createElement(Bird, {\n    birdBottom: birdBottom,\n    birdLeft: birdLeft\n  }), React.createElement(Obstacles, {\n    color: 'green',\n    obstacleWidth: obstacleWidth,\n    obstacleLeft: obstaclesLeft,\n    obstacleHeight: obstacleHeight,\n    randomBottom: obstaclesNegHeight,\n    gap: gap\n  }), React.createElement(Obstacles, {\n    color: 'yellow',\n    obstacleWidth: obstacleWidth,\n    obstacleLeft: obstaclesLeftTwo,\n    obstacleHeight: obstacleHeight,\n    randomBottom: obstaclesNegHeightTwo,\n    gap: gap\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/leonardojaques/Desktop/WorkTable/flipBirdReact/flipbirdreactnativ/App.js"],"names":["React","useEffect","useState","Bird","Obstacles","App","screenWidth","Dimensions","get","width","screenHeight","height","birdLeft","birdBottom","setBirdBottom","gravity","obstaclesNegHeight","setObstaclesNegHeight","obstaclesNegHeightTwo","setObstaclesNegHeightTwo","score","setScore","obstaclesLeft","setObstaclesLeft","obstaclesLeftTwo","setObstaclesLeftTwo","obstacleWidth","obstacleHeight","gap","gameTimerId","obstaclesLeftTimerId","obstaclesLeftTimerIdTwo","isGameOver","setIsGameOver","setInterval","clearInterval","Math","random","console","log","gameOver","jump","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Dimensions,\n  StyleSheet,\n  View,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport Bird from './components/Bird';\nimport Obstacles from './components/Obstacles';\n\nexport default function App() {\n  const screenWidth = Dimensions.get('screen').width;\n  const screenHeight = Dimensions.get('screen').height;\n\n  const birdLeft = screenWidth / 2;\n  const [birdBottom, setBirdBottom] = useState(screenHeight / 2 + 30);\n  const gravity = 3;\n\n  const [obstaclesNegHeight, setObstaclesNegHeight] = useState(0);\n  const [obstaclesNegHeightTwo, setObstaclesNegHeightTwo] = useState(0);\n  const [score, setScore] = useState(0);\n\n  const [obstaclesLeft, setObstaclesLeft] = useState(screenWidth);\n  const [obstaclesLeftTwo, setObstaclesLeftTwo] = useState(\n    screenWidth + screenWidth / 2\n  );\n\n  const obstacleWidth = 60;\n  const obstacleHeight = 300;\n  const gap = 200;\n\n  let gameTimerId;\n  let obstaclesLeftTimerId;\n  let obstaclesLeftTimerIdTwo;\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  //TODO starting bird falling\n\n  useEffect(() => {\n    if (birdBottom > 0) {\n      gameTimerId = setInterval(() => {\n        setBirdBottom((birdBottom) => birdBottom - gravity);\n      }, 30);\n      return () => {\n        clearInterval(gameTimerId);\n      };\n    }\n    //if i dont have birdBottom as a dependecy, it wont stop\n  }, [birdBottom]);\n\n  //TODO start first obstacles\n  useEffect(() => {\n    if (obstaclesLeft > -obstacleWidth) {\n      obstaclesLeftTimerId = setInterval(() => {\n        setObstaclesLeft((obstaclesLeft) => obstaclesLeft - 5);\n      }, 30);\n      return () => {\n        clearInterval(obstaclesLeftTimerId);\n      };\n    } else {\n      setObstaclesLeft(screenWidth);\n      setObstaclesNegHeight(-Math.random() * 100);\n      setScore((score) => score + 1);\n    }\n  }, [obstaclesLeft]);\n\n  //TODO start second obstacles\n  useEffect(() => {\n    if (obstaclesLeftTwo > -obstacleWidth) {\n      obstaclesLeftTimerIdTwo = setInterval(() => {\n        setObstaclesLeftTwo((obstaclesLeftTwo) => obstaclesLeftTwo - 5);\n      }, 30);\n      return () => {\n        clearInterval(obstaclesLeftTimerIdTwo);\n      };\n    } else {\n      setObstaclesLeftTwo(screenWidth);\n      setObstaclesNegHeightTwo(-Math.random() * 100);\n      setScore((score) => score + 1);\n    }\n  }, [obstaclesLeftTwo]);\n\n  //TODO check for collisions\n\n  //check for collisions\n  useEffect(() => {\n    console.log(obstaclesLeft);\n    console.log(screenWidth / 2);\n    console.log(obstaclesLeft > screenWidth / 2);\n    if (\n      ((birdBottom < obstaclesNegHeight + obstacleHeight + 30 ||\n        birdBottom > obstaclesNegHeight + obstacleHeight + gap - 30) &&\n        obstaclesLeft > screenWidth / 2 - 30 &&\n        obstaclesLeft < screenWidth / 2 + 30) ||\n      ((birdBottom < obstaclesNegHeightTwo + obstacleHeight + 30 ||\n        birdBottom > obstaclesNegHeightTwo + obstacleHeight + gap - 30) &&\n        obstaclesLeftTwo > screenWidth / 2 - 30 &&\n        obstaclesLeftTwo < screenWidth / 2 + 30)\n    ) {\n      console.log('game over');\n      gameOver();\n    }\n  });\n\n  const gameOver = () => {\n    clearInterval(gameTimerId);\n    clearInterval(obstaclesLeftTimerId);\n    clearInterval(obstaclesLeftTimerIdTwo);\n    setIsGameOver(true);\n  };\n\n  const jump = () => {\n    if (!isGameOver && birdBottom < screenHeight) {\n      setBirdBottom((birdBottom) => birdBottom + 50);\n      console.log('jumped');\n    }\n  };\n\n  return (\n    <TouchableWithoutFeedback onPress={jump}>\n      <View style={styles.container}>\n        {isGameOver && <Text>Score</Text>}\n        <Bird birdBottom={birdBottom} birdLeft={birdLeft} />\n        <Obstacles\n          color={'green'}\n          obstacleWidth={obstacleWidth}\n          obstacleLeft={obstaclesLeft}\n          obstacleHeight={obstacleHeight}\n          randomBottom={obstaclesNegHeight}\n          gap={gap}\n        />\n        <Obstacles\n          color={'yellow'}\n          obstacleWidth={obstacleWidth}\n          obstacleLeft={obstaclesLeftTwo}\n          obstacleHeight={obstacleHeight}\n          randomBottom={obstaclesNegHeightTwo}\n          gap={gap}\n        />\n      </View>\n    </TouchableWithoutFeedback>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}